/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: msg.proto */

#ifndef PROTOBUF_C_msg_2eproto__INCLUDED
#define PROTOBUF_C_msg_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1005000 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct Rpc__Request Rpc__Request;
typedef struct Rpc__Msg Rpc__Msg;
typedef struct Rpc__NumberMsg Rpc__NumberMsg;
typedef struct Rpc__BytesMsg Rpc__BytesMsg;
typedef struct Rpc__Ping Rpc__Ping;
typedef struct Rpc__Login Rpc__Login;
typedef struct Rpc__ThirdPartyAuthority Rpc__ThirdPartyAuthority;
typedef struct Rpc__BroadcastMessage Rpc__BroadcastMessage;
typedef struct Rpc__DeliverMessage Rpc__DeliverMessage;
typedef struct Rpc__ServerInfo Rpc__ServerInfo;
typedef struct Rpc__Player Rpc__Player;
typedef struct Rpc__LoginResult Rpc__LoginResult;
typedef struct Rpc__ErrorCode Rpc__ErrorCode;
typedef struct Rpc__KeyValue Rpc__KeyValue;
typedef struct Rpc__Configs Rpc__Configs;
typedef struct Rpc__AssistantConfig Rpc__AssistantConfig;
typedef struct Rpc__KLine Rpc__KLine;
typedef struct Rpc__Security Rpc__Security;
typedef struct Rpc__Securities Rpc__Securities;
typedef struct Rpc__SecurityKLines Rpc__SecurityKLines;


/* --- enums --- */

typedef enum _Rpc__LoginResult__LoginError {
  RPC__LOGIN_RESULT__LOGIN_ERROR__Auth_Error = 1,
  RPC__LOGIN_RESULT__LOGIN_ERROR__Bind_Error = 2,
  RPC__LOGIN_RESULT__LOGIN_ERROR__NoServer_Error = 3,
  RPC__LOGIN_RESULT__LOGIN_ERROR__OpenId_Error = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(RPC__LOGIN_RESULT__LOGIN_ERROR)
} Rpc__LoginResult__LoginError;
typedef enum _Rpc__ErrorCode__ErrorType {
  RPC__ERROR_CODE__ERROR_TYPE__RoomInvalid = 1,
  RPC__ERROR_CODE__ERROR_TYPE__ServerInvalid = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(RPC__ERROR_CODE__ERROR_TYPE)
} Rpc__ErrorCode__ErrorType;
typedef enum _Rpc__AccountType {
  RPC__ACCOUNT_TYPE__Guest = 0,
  RPC__ACCOUNT_TYPE__WX = 1,
  RPC__ACCOUNT_TYPE__Apple = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(RPC__ACCOUNT_TYPE)
} Rpc__AccountType;

/* --- messages --- */

struct  Rpc__Request
{
  ProtobufCMessage base;
  protobuf_c_boolean has_uniqueid;
  uint32_t uniqueid;
  char *method;
  char *protoname;
  ProtobufCBinaryData serialized_data;
  protobuf_c_boolean has_servertime;
  uint32_t servertime;
};
#define RPC__REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rpc__request__descriptor) \
, 0, 0, NULL, NULL, {0,NULL}, 0, 0 }


struct  Rpc__Msg
{
  ProtobufCMessage base;
  char *code;
  char *text;
};
#define RPC__MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rpc__msg__descriptor) \
, NULL, NULL }


struct  Rpc__NumberMsg
{
  ProtobufCMessage base;
  protobuf_c_boolean has_num;
  double num;
};
#define RPC__NUMBER_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rpc__number_msg__descriptor) \
, 0, 0 }


struct  Rpc__BytesMsg
{
  ProtobufCMessage base;
  char *code;
  ProtobufCBinaryData data;
};
#define RPC__BYTES_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rpc__bytes_msg__descriptor) \
, NULL, {0,NULL} }


struct  Rpc__Ping
{
  ProtobufCMessage base;
};
#define RPC__PING__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rpc__ping__descriptor) \
 }


struct  Rpc__Login
{
  ProtobufCMessage base;
  protobuf_c_boolean has_accounttype;
  Rpc__AccountType accounttype;
  char *openid;
  char *token;
  protobuf_c_boolean has_serverid;
  uint32_t serverid;
  char *name;
};
#define RPC__LOGIN__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rpc__login__descriptor) \
, 0, RPC__ACCOUNT_TYPE__Guest, NULL, NULL, 0, 0, NULL }


struct  Rpc__ThirdPartyAuthority
{
  ProtobufCMessage base;
  protobuf_c_boolean success;
  char *openid;
  char *sessionkey;
  char *error;
  char *code;
};
#define RPC__THIRD_PARTY_AUTHORITY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rpc__third_party_authority__descriptor) \
, 0, NULL, NULL, NULL, NULL }


struct  Rpc__BroadcastMessage
{
  ProtobufCMessage base;
  size_t n_uids;
  char **uids;
  char *protoname;
  ProtobufCBinaryData data;
};
#define RPC__BROADCAST_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rpc__broadcast_message__descriptor) \
, 0,NULL, NULL, {0,NULL} }


struct  Rpc__DeliverMessage
{
  ProtobufCMessage base;
  char *serverid;
  char *protoname;
  ProtobufCBinaryData data;
};
#define RPC__DELIVER_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rpc__deliver_message__descriptor) \
, NULL, NULL, {0,NULL} }


struct  Rpc__ServerInfo
{
  ProtobufCMessage base;
  char *serverid;
};
#define RPC__SERVER_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rpc__server_info__descriptor) \
, NULL }


struct  Rpc__Player
{
  ProtobufCMessage base;
  char *uid;
  char *openid;
  char *name;
  protobuf_c_boolean has_accounttype;
  Rpc__AccountType accounttype;
};
#define RPC__PLAYER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rpc__player__descriptor) \
, NULL, NULL, NULL, 0, RPC__ACCOUNT_TYPE__Guest }


struct  Rpc__LoginResult
{
  ProtobufCMessage base;
  protobuf_c_boolean succ;
  Rpc__Player *player;
  protobuf_c_boolean has_errorcode;
  Rpc__LoginResult__LoginError errorcode;
  size_t n_serverids;
  uint32_t *serverids;
  char *magiccode;
  protobuf_c_boolean has_clearreceipt;
  protobuf_c_boolean clearreceipt;
};
#define RPC__LOGIN_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rpc__login_result__descriptor) \
, 0, NULL, 0, RPC__LOGIN_RESULT__LOGIN_ERROR__Auth_Error, 0,NULL, NULL, 0, 0 }


struct  Rpc__ErrorCode
{
  ProtobufCMessage base;
  Rpc__ErrorCode__ErrorType code;
};
#define RPC__ERROR_CODE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rpc__error_code__descriptor) \
, RPC__ERROR_CODE__ERROR_TYPE__RoomInvalid }


struct  Rpc__KeyValue
{
  ProtobufCMessage base;
  char *key;
  char *value;
};
#define RPC__KEY_VALUE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rpc__key_value__descriptor) \
, NULL, NULL }


struct  Rpc__Configs
{
  ProtobufCMessage base;
  size_t n_pairs;
  Rpc__KeyValue **pairs;
};
#define RPC__CONFIGS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rpc__configs__descriptor) \
, 0,NULL }


struct  Rpc__AssistantConfig
{
  ProtobufCMessage base;
  char *json;
};
#define RPC__ASSISTANT_CONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rpc__assistant_config__descriptor) \
, NULL }


struct  Rpc__KLine
{
  ProtobufCMessage base;
  char *date;
  double open;
  double high;
  double low;
  double close;
  double volume;
  protobuf_c_boolean has_factor;
  double factor;
  protobuf_c_boolean has_amount;
  double amount;
};
#define RPC__KLINE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rpc__kline__descriptor) \
, NULL, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


struct  Rpc__Security
{
  ProtobufCMessage base;
  char *name;
  char *displayname;
  char *code;
  char *begindate;
  char *enddate;
  char *type;
};
#define RPC__SECURITY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rpc__security__descriptor) \
, NULL, NULL, NULL, NULL, NULL, NULL }


struct  Rpc__Securities
{
  ProtobufCMessage base;
  size_t n_securities;
  Rpc__Security **securities;
};
#define RPC__SECURITIES__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rpc__securities__descriptor) \
, 0,NULL }


struct  Rpc__SecurityKLines
{
  ProtobufCMessage base;
  char *code;
  size_t n_klines;
  Rpc__KLine **klines;
};
#define RPC__SECURITY_KLINES__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rpc__security_klines__descriptor) \
, NULL, 0,NULL }


/* Rpc__Request methods */
void   rpc__request__init
                     (Rpc__Request         *message);
size_t rpc__request__get_packed_size
                     (const Rpc__Request   *message);
size_t rpc__request__pack
                     (const Rpc__Request   *message,
                      uint8_t             *out);
size_t rpc__request__pack_to_buffer
                     (const Rpc__Request   *message,
                      ProtobufCBuffer     *buffer);
Rpc__Request *
       rpc__request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rpc__request__free_unpacked
                     (Rpc__Request *message,
                      ProtobufCAllocator *allocator);
/* Rpc__Msg methods */
void   rpc__msg__init
                     (Rpc__Msg         *message);
size_t rpc__msg__get_packed_size
                     (const Rpc__Msg   *message);
size_t rpc__msg__pack
                     (const Rpc__Msg   *message,
                      uint8_t             *out);
size_t rpc__msg__pack_to_buffer
                     (const Rpc__Msg   *message,
                      ProtobufCBuffer     *buffer);
Rpc__Msg *
       rpc__msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rpc__msg__free_unpacked
                     (Rpc__Msg *message,
                      ProtobufCAllocator *allocator);
/* Rpc__NumberMsg methods */
void   rpc__number_msg__init
                     (Rpc__NumberMsg         *message);
size_t rpc__number_msg__get_packed_size
                     (const Rpc__NumberMsg   *message);
size_t rpc__number_msg__pack
                     (const Rpc__NumberMsg   *message,
                      uint8_t             *out);
size_t rpc__number_msg__pack_to_buffer
                     (const Rpc__NumberMsg   *message,
                      ProtobufCBuffer     *buffer);
Rpc__NumberMsg *
       rpc__number_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rpc__number_msg__free_unpacked
                     (Rpc__NumberMsg *message,
                      ProtobufCAllocator *allocator);
/* Rpc__BytesMsg methods */
void   rpc__bytes_msg__init
                     (Rpc__BytesMsg         *message);
size_t rpc__bytes_msg__get_packed_size
                     (const Rpc__BytesMsg   *message);
size_t rpc__bytes_msg__pack
                     (const Rpc__BytesMsg   *message,
                      uint8_t             *out);
size_t rpc__bytes_msg__pack_to_buffer
                     (const Rpc__BytesMsg   *message,
                      ProtobufCBuffer     *buffer);
Rpc__BytesMsg *
       rpc__bytes_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rpc__bytes_msg__free_unpacked
                     (Rpc__BytesMsg *message,
                      ProtobufCAllocator *allocator);
/* Rpc__Ping methods */
void   rpc__ping__init
                     (Rpc__Ping         *message);
size_t rpc__ping__get_packed_size
                     (const Rpc__Ping   *message);
size_t rpc__ping__pack
                     (const Rpc__Ping   *message,
                      uint8_t             *out);
size_t rpc__ping__pack_to_buffer
                     (const Rpc__Ping   *message,
                      ProtobufCBuffer     *buffer);
Rpc__Ping *
       rpc__ping__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rpc__ping__free_unpacked
                     (Rpc__Ping *message,
                      ProtobufCAllocator *allocator);
/* Rpc__Login methods */
void   rpc__login__init
                     (Rpc__Login         *message);
size_t rpc__login__get_packed_size
                     (const Rpc__Login   *message);
size_t rpc__login__pack
                     (const Rpc__Login   *message,
                      uint8_t             *out);
size_t rpc__login__pack_to_buffer
                     (const Rpc__Login   *message,
                      ProtobufCBuffer     *buffer);
Rpc__Login *
       rpc__login__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rpc__login__free_unpacked
                     (Rpc__Login *message,
                      ProtobufCAllocator *allocator);
/* Rpc__ThirdPartyAuthority methods */
void   rpc__third_party_authority__init
                     (Rpc__ThirdPartyAuthority         *message);
size_t rpc__third_party_authority__get_packed_size
                     (const Rpc__ThirdPartyAuthority   *message);
size_t rpc__third_party_authority__pack
                     (const Rpc__ThirdPartyAuthority   *message,
                      uint8_t             *out);
size_t rpc__third_party_authority__pack_to_buffer
                     (const Rpc__ThirdPartyAuthority   *message,
                      ProtobufCBuffer     *buffer);
Rpc__ThirdPartyAuthority *
       rpc__third_party_authority__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rpc__third_party_authority__free_unpacked
                     (Rpc__ThirdPartyAuthority *message,
                      ProtobufCAllocator *allocator);
/* Rpc__BroadcastMessage methods */
void   rpc__broadcast_message__init
                     (Rpc__BroadcastMessage         *message);
size_t rpc__broadcast_message__get_packed_size
                     (const Rpc__BroadcastMessage   *message);
size_t rpc__broadcast_message__pack
                     (const Rpc__BroadcastMessage   *message,
                      uint8_t             *out);
size_t rpc__broadcast_message__pack_to_buffer
                     (const Rpc__BroadcastMessage   *message,
                      ProtobufCBuffer     *buffer);
Rpc__BroadcastMessage *
       rpc__broadcast_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rpc__broadcast_message__free_unpacked
                     (Rpc__BroadcastMessage *message,
                      ProtobufCAllocator *allocator);
/* Rpc__DeliverMessage methods */
void   rpc__deliver_message__init
                     (Rpc__DeliverMessage         *message);
size_t rpc__deliver_message__get_packed_size
                     (const Rpc__DeliverMessage   *message);
size_t rpc__deliver_message__pack
                     (const Rpc__DeliverMessage   *message,
                      uint8_t             *out);
size_t rpc__deliver_message__pack_to_buffer
                     (const Rpc__DeliverMessage   *message,
                      ProtobufCBuffer     *buffer);
Rpc__DeliverMessage *
       rpc__deliver_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rpc__deliver_message__free_unpacked
                     (Rpc__DeliverMessage *message,
                      ProtobufCAllocator *allocator);
/* Rpc__ServerInfo methods */
void   rpc__server_info__init
                     (Rpc__ServerInfo         *message);
size_t rpc__server_info__get_packed_size
                     (const Rpc__ServerInfo   *message);
size_t rpc__server_info__pack
                     (const Rpc__ServerInfo   *message,
                      uint8_t             *out);
size_t rpc__server_info__pack_to_buffer
                     (const Rpc__ServerInfo   *message,
                      ProtobufCBuffer     *buffer);
Rpc__ServerInfo *
       rpc__server_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rpc__server_info__free_unpacked
                     (Rpc__ServerInfo *message,
                      ProtobufCAllocator *allocator);
/* Rpc__Player methods */
void   rpc__player__init
                     (Rpc__Player         *message);
size_t rpc__player__get_packed_size
                     (const Rpc__Player   *message);
size_t rpc__player__pack
                     (const Rpc__Player   *message,
                      uint8_t             *out);
size_t rpc__player__pack_to_buffer
                     (const Rpc__Player   *message,
                      ProtobufCBuffer     *buffer);
Rpc__Player *
       rpc__player__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rpc__player__free_unpacked
                     (Rpc__Player *message,
                      ProtobufCAllocator *allocator);
/* Rpc__LoginResult methods */
void   rpc__login_result__init
                     (Rpc__LoginResult         *message);
size_t rpc__login_result__get_packed_size
                     (const Rpc__LoginResult   *message);
size_t rpc__login_result__pack
                     (const Rpc__LoginResult   *message,
                      uint8_t             *out);
size_t rpc__login_result__pack_to_buffer
                     (const Rpc__LoginResult   *message,
                      ProtobufCBuffer     *buffer);
Rpc__LoginResult *
       rpc__login_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rpc__login_result__free_unpacked
                     (Rpc__LoginResult *message,
                      ProtobufCAllocator *allocator);
/* Rpc__ErrorCode methods */
void   rpc__error_code__init
                     (Rpc__ErrorCode         *message);
size_t rpc__error_code__get_packed_size
                     (const Rpc__ErrorCode   *message);
size_t rpc__error_code__pack
                     (const Rpc__ErrorCode   *message,
                      uint8_t             *out);
size_t rpc__error_code__pack_to_buffer
                     (const Rpc__ErrorCode   *message,
                      ProtobufCBuffer     *buffer);
Rpc__ErrorCode *
       rpc__error_code__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rpc__error_code__free_unpacked
                     (Rpc__ErrorCode *message,
                      ProtobufCAllocator *allocator);
/* Rpc__KeyValue methods */
void   rpc__key_value__init
                     (Rpc__KeyValue         *message);
size_t rpc__key_value__get_packed_size
                     (const Rpc__KeyValue   *message);
size_t rpc__key_value__pack
                     (const Rpc__KeyValue   *message,
                      uint8_t             *out);
size_t rpc__key_value__pack_to_buffer
                     (const Rpc__KeyValue   *message,
                      ProtobufCBuffer     *buffer);
Rpc__KeyValue *
       rpc__key_value__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rpc__key_value__free_unpacked
                     (Rpc__KeyValue *message,
                      ProtobufCAllocator *allocator);
/* Rpc__Configs methods */
void   rpc__configs__init
                     (Rpc__Configs         *message);
size_t rpc__configs__get_packed_size
                     (const Rpc__Configs   *message);
size_t rpc__configs__pack
                     (const Rpc__Configs   *message,
                      uint8_t             *out);
size_t rpc__configs__pack_to_buffer
                     (const Rpc__Configs   *message,
                      ProtobufCBuffer     *buffer);
Rpc__Configs *
       rpc__configs__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rpc__configs__free_unpacked
                     (Rpc__Configs *message,
                      ProtobufCAllocator *allocator);
/* Rpc__AssistantConfig methods */
void   rpc__assistant_config__init
                     (Rpc__AssistantConfig         *message);
size_t rpc__assistant_config__get_packed_size
                     (const Rpc__AssistantConfig   *message);
size_t rpc__assistant_config__pack
                     (const Rpc__AssistantConfig   *message,
                      uint8_t             *out);
size_t rpc__assistant_config__pack_to_buffer
                     (const Rpc__AssistantConfig   *message,
                      ProtobufCBuffer     *buffer);
Rpc__AssistantConfig *
       rpc__assistant_config__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rpc__assistant_config__free_unpacked
                     (Rpc__AssistantConfig *message,
                      ProtobufCAllocator *allocator);
/* Rpc__KLine methods */
void   rpc__kline__init
                     (Rpc__KLine         *message);
size_t rpc__kline__get_packed_size
                     (const Rpc__KLine   *message);
size_t rpc__kline__pack
                     (const Rpc__KLine   *message,
                      uint8_t             *out);
size_t rpc__kline__pack_to_buffer
                     (const Rpc__KLine   *message,
                      ProtobufCBuffer     *buffer);
Rpc__KLine *
       rpc__kline__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rpc__kline__free_unpacked
                     (Rpc__KLine *message,
                      ProtobufCAllocator *allocator);
/* Rpc__Security methods */
void   rpc__security__init
                     (Rpc__Security         *message);
size_t rpc__security__get_packed_size
                     (const Rpc__Security   *message);
size_t rpc__security__pack
                     (const Rpc__Security   *message,
                      uint8_t             *out);
size_t rpc__security__pack_to_buffer
                     (const Rpc__Security   *message,
                      ProtobufCBuffer     *buffer);
Rpc__Security *
       rpc__security__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rpc__security__free_unpacked
                     (Rpc__Security *message,
                      ProtobufCAllocator *allocator);
/* Rpc__Securities methods */
void   rpc__securities__init
                     (Rpc__Securities         *message);
size_t rpc__securities__get_packed_size
                     (const Rpc__Securities   *message);
size_t rpc__securities__pack
                     (const Rpc__Securities   *message,
                      uint8_t             *out);
size_t rpc__securities__pack_to_buffer
                     (const Rpc__Securities   *message,
                      ProtobufCBuffer     *buffer);
Rpc__Securities *
       rpc__securities__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rpc__securities__free_unpacked
                     (Rpc__Securities *message,
                      ProtobufCAllocator *allocator);
/* Rpc__SecurityKLines methods */
void   rpc__security_klines__init
                     (Rpc__SecurityKLines         *message);
size_t rpc__security_klines__get_packed_size
                     (const Rpc__SecurityKLines   *message);
size_t rpc__security_klines__pack
                     (const Rpc__SecurityKLines   *message,
                      uint8_t             *out);
size_t rpc__security_klines__pack_to_buffer
                     (const Rpc__SecurityKLines   *message,
                      ProtobufCBuffer     *buffer);
Rpc__SecurityKLines *
       rpc__security_klines__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rpc__security_klines__free_unpacked
                     (Rpc__SecurityKLines *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Rpc__Request_Closure)
                 (const Rpc__Request *message,
                  void *closure_data);
typedef void (*Rpc__Msg_Closure)
                 (const Rpc__Msg *message,
                  void *closure_data);
typedef void (*Rpc__NumberMsg_Closure)
                 (const Rpc__NumberMsg *message,
                  void *closure_data);
typedef void (*Rpc__BytesMsg_Closure)
                 (const Rpc__BytesMsg *message,
                  void *closure_data);
typedef void (*Rpc__Ping_Closure)
                 (const Rpc__Ping *message,
                  void *closure_data);
typedef void (*Rpc__Login_Closure)
                 (const Rpc__Login *message,
                  void *closure_data);
typedef void (*Rpc__ThirdPartyAuthority_Closure)
                 (const Rpc__ThirdPartyAuthority *message,
                  void *closure_data);
typedef void (*Rpc__BroadcastMessage_Closure)
                 (const Rpc__BroadcastMessage *message,
                  void *closure_data);
typedef void (*Rpc__DeliverMessage_Closure)
                 (const Rpc__DeliverMessage *message,
                  void *closure_data);
typedef void (*Rpc__ServerInfo_Closure)
                 (const Rpc__ServerInfo *message,
                  void *closure_data);
typedef void (*Rpc__Player_Closure)
                 (const Rpc__Player *message,
                  void *closure_data);
typedef void (*Rpc__LoginResult_Closure)
                 (const Rpc__LoginResult *message,
                  void *closure_data);
typedef void (*Rpc__ErrorCode_Closure)
                 (const Rpc__ErrorCode *message,
                  void *closure_data);
typedef void (*Rpc__KeyValue_Closure)
                 (const Rpc__KeyValue *message,
                  void *closure_data);
typedef void (*Rpc__Configs_Closure)
                 (const Rpc__Configs *message,
                  void *closure_data);
typedef void (*Rpc__AssistantConfig_Closure)
                 (const Rpc__AssistantConfig *message,
                  void *closure_data);
typedef void (*Rpc__KLine_Closure)
                 (const Rpc__KLine *message,
                  void *closure_data);
typedef void (*Rpc__Security_Closure)
                 (const Rpc__Security *message,
                  void *closure_data);
typedef void (*Rpc__Securities_Closure)
                 (const Rpc__Securities *message,
                  void *closure_data);
typedef void (*Rpc__SecurityKLines_Closure)
                 (const Rpc__SecurityKLines *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    rpc__account_type__descriptor;
extern const ProtobufCMessageDescriptor rpc__request__descriptor;
extern const ProtobufCMessageDescriptor rpc__msg__descriptor;
extern const ProtobufCMessageDescriptor rpc__number_msg__descriptor;
extern const ProtobufCMessageDescriptor rpc__bytes_msg__descriptor;
extern const ProtobufCMessageDescriptor rpc__ping__descriptor;
extern const ProtobufCMessageDescriptor rpc__login__descriptor;
extern const ProtobufCMessageDescriptor rpc__third_party_authority__descriptor;
extern const ProtobufCMessageDescriptor rpc__broadcast_message__descriptor;
extern const ProtobufCMessageDescriptor rpc__deliver_message__descriptor;
extern const ProtobufCMessageDescriptor rpc__server_info__descriptor;
extern const ProtobufCMessageDescriptor rpc__player__descriptor;
extern const ProtobufCMessageDescriptor rpc__login_result__descriptor;
extern const ProtobufCEnumDescriptor    rpc__login_result__login_error__descriptor;
extern const ProtobufCMessageDescriptor rpc__error_code__descriptor;
extern const ProtobufCEnumDescriptor    rpc__error_code__error_type__descriptor;
extern const ProtobufCMessageDescriptor rpc__key_value__descriptor;
extern const ProtobufCMessageDescriptor rpc__configs__descriptor;
extern const ProtobufCMessageDescriptor rpc__assistant_config__descriptor;
extern const ProtobufCMessageDescriptor rpc__kline__descriptor;
extern const ProtobufCMessageDescriptor rpc__security__descriptor;
extern const ProtobufCMessageDescriptor rpc__securities__descriptor;
extern const ProtobufCMessageDescriptor rpc__security_klines__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_msg_2eproto__INCLUDED */
